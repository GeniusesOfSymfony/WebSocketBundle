services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    Gos\Bundle\WebSocketBundle\:
      resource: '../../../*'
      exclude: '../../../{Entity,Migrations,Tests,GosWebSocketBundle.php}'

    Gos\Bundle\WebSocketBundle\Command\WebsocketServerCommand:
        arguments:
            $host: '%web_socket_server.host%'
            $port: '%web_socket_server.port%'
        tags:
            - { name: monolog.logger, channel: websocket }
            - { name: console.command, command: gos:websocket:server }

    Gos\Component\WebSocketClient\Wamp\Client:
        arguments:
           $host: '%web_socket_server.host%'
           $port: '%web_socket_server.port%'
        tags:
            - { name: monolog.logger, channel: websocket }

    Gos\Bundle\WebSocketBundle\Server\Type\WebSocketServer:
        lazy: true
        arguments:
            $loop: '@React\EventLoop\Factory'
            $eventDispatcher: '@event_dispatcher'
            $periodicRegistry: '@Gos\Bundle\WebSocketBundle\Server\App\Registry\PeriodicRegistry'
            $wampApplication: '@Gos\Bundle\WebSocketBundle\Server\App\WampApplication'
            $originRegistry: '@Gos\Bundle\WebSocketBundle\Server\App\Registry\OriginRegistry'
            $originCheck: '%web_socket_origin_check%'
            $topicManager: '@Gos\Bundle\WebSocketBundle\Topic\TopicManager'
            $serverPushHandlerRegistry: '@Gos\Bundle\WebSocketBundle\Pusher\ServerPushHandlerRegistry'
        tags:
            - { name: monolog.logger, channel: websocket }
            - { name: gos_web_socket.server }

    Gos\Bundle\WebSocketBundle\Server\App\Dispatcher\RpcDispatcher:
        arguments:
            - '@Gos\Bundle\WebSocketBundle\Server\App\Registry\RpcRegistry'

    Gos\Bundle\WebSocketBundle\Server\App\Dispatcher\TopicDispatcher:
        lazy: true
        arguments:
            $topicRegistry: '@Gos\Bundle\WebSocketBundle\Server\App\Registry\TopicRegistry'
            $router: '@Gos\Bundle\WebSocketBundle\Router\WampRouter'
            $topicPeriodicTimer: '@Gos\Bundle\WebSocketBundle\Topic\TopicPeriodicTimer'
            $topicManager: '@Gos\Bundle\WebSocketBundle\Topic\TopicManager'
        tags:
            - { name: monolog.logger, channel: websocket }

    Gos\Bundle\WebSocketBundle\Topic\TopicManager:
        public: false

    Gos\Bundle\WebSocketBundle\Server\App\WampApplication:
        public: false
        lazy: true
        arguments:
            $rpcDispatcher: '@Gos\Bundle\WebSocketBundle\Server\App\Dispatcher\RpcDispatcher'
            $topicDispatcher: '@Gos\Bundle\WebSocketBundle\Server\App\Dispatcher\TopicDispatcher'
            $eventDispatcher: '@event_dispatcher'
            $clientStorage: '@Gos\Bundle\WebSocketBundle\Client\ClientStorage'
            $wampRouter: '@Gos\Bundle\WebSocketBundle\Router\WampRouter'
        tags:
            - { name: monolog.logger, channel: websocket }

    Gos\Bundle\WebSocketBundle\Client\ClientStorage:
        arguments:
            $ttl: '%web_socket_server.client_storage.ttl%'
        tags:
            - { name: monolog.logger, channel: websocket }

    Gos\Bundle\WebSocketBundle\Client\Driver\DoctrineCacheDriverDecorator:
        lazy: true
        # argument are set via compiler pass

    Gos\Bundle\WebSocketBundle\Event\ClientEventListener:
        arguments:
            $clientStorage: '@Gos\Bundle\WebSocketBundle\Client\ClientStorage'
            $authenticationProvider: '@Gos\Bundle\WebSocketBundle\Client\Auth\WebsocketAuthenticationProvider'
        lazy: true
        tags:
            - { name: monolog.logger, channel: websocket }
            - { name: kernel.event_listener, event: 'gos_web_socket.client_connected', method: onClientConnect }
            - { name: kernel.event_listener, event: 'gos_web_socket.client_disconnected', method: onClientDisconnect }
            - { name: kernel.event_listener, event: 'gos_web_socket.client_error', method: onClientError }
            - { name: kernel.event_listener, event: 'gos_web_socket.client_rejected', method: onClientRejected }

    Gos\Bundle\WebSocketBundle\Router\WampRouter:
        lazy: true
        arguments:
            $router: '@Gos\Bundle\WebSocketBundle\Router\NullPubSubRouter'
            $debug: '%kernel.debug%'
        tags:
            - { name: monolog.logger, channel: websocket }

    Gos\Bundle\WebSocketBundle\Periodic\PdoPeriodicPing:
        lazy: true
        arguments:
            $pdo: '@?pdo'
        tags:
            - { name: monolog.logger, channel: websocket }

    Gos\Bundle\WebSocketBundle\Periodic\PeriodicMemoryUsage:
        lazy: true
        tags:
            - { name: monolog.logger, channel: websocket }

    Gos\Bundle\WebSocketBundle\Event\StartServerListener:
        lazy: true
        arguments:
            $serverPushHandlerRegistry: '@Gos\Bundle\WebSocketBundle\Pusher\ServerPushHandlerRegistry'
        tags:
            - { name: kernel.event_listener, event: 'gos_web_socket.server_launched', method: bindPnctlEvent }
            - { name: monolog.logger, channel: websocket }

    React\EventLoop\Factory:
        public: false

    Gos\Bundle\WebSocketBundle\Topic\TopicPeriodicTimer:
        arguments:
            $loop: '@React\EventLoop\Factory'

    Gos\Bundle\WebSocketBundle\Client\Auth\WebsocketAuthenticationProvider:
        arguments:
            $tokenStorage: '@security.token_storage'
            $firewalls: '%gos_web_socket.firewall%'
            $clientStorage: '@Gos\Bundle\WebSocketBundle\Client\ClientStorage'
        tags:
            - { name: monolog.logger, channel: websocket }

    Gos\Bundle\WebSocketBundle\Client\ClientManipulator:
        arguments:
            $clientStorage: '@Gos\Bundle\WebSocketBundle\Client\ClientStorage'
            $authenticationProvider: '@Gos\Bundle\WebSocketBundle\Client\Auth\WebsocketAuthenticationProvider'

    Gos\Bundle\WebSocketBundle\Pusher\Zmq\ZmqPusher:
        tags:
            - { name: gos_web_socket.pusher, alias: zmq }

    Gos\Bundle\WebSocketBundle\Pusher\Zmq\ZmqServerPushHandler:
        tags:
            - { name: gos_web_socket.push_handler, alias: zmq }
            - { name: monolog.logger, channel: websocket }

    Gos\Bundle\WebSocketBundle\Pusher\Amqp\AmqpPusher:
        tags:
            - { name: gos_web_socket.pusher, alias: amqp }

    Gos\Bundle\WebSocketBundle\Pusher\Wamp\WampPusher:
        tags:
            - { name: gos_web_socket.pusher, alias: wamp }

    Gos\Bundle\WebSocketBundle\Pusher\Amqp\AmqpServerPushHandler:
        tags:
            - { name: gos_web_socket.push_handler, alias: amqp }
            - { name: monolog.logger, channel: websocket }

    Gos\Bundle\WebSocketBundle\DataCollector\WebsocketDataCollector:
        tags:
            - { name: data_collector, template: '@GosWebSocket/Collector/websocket.html.twig', id: 'websocket' }
